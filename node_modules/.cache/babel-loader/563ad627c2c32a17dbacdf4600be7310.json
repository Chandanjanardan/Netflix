{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kittu\\\\react\\\\movie\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from './axios';\nimport requests from './requests';\nimport \"./Row.css\";\nimport youtube from \"react-youtube\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"http://image.tmdb.org/t/p/w154\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    // whne this row loads this piece of code run\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results); // above line put movie in srt movie and .data.results come from console\n\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); // fetch url is outside so every times its change it will re render it.\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"+jZiGaK1IrFkDFSplSYv9W7La4s=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/kittu/react/movie/src/Row.js"],"names":["React","useState","useEffect","YouTube","axios","requests","youtube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","map","movie","poster_path","backdrop_path","name","id","trailerUrl"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAuC,OAAvC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,eAApB;;AACA,MAAMC,QAAQ,GAAE,gCAAhB;;AAGA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAOC,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAb,EAA0C;AAAA;;AACtC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBZ,QAAQ,CAAC,EAAD,CAAjC;AACAC,EAAAA,SAAS,CAAC,MAAI;AACV;AACA,mBAAeY,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAE,MAAMX,KAAK,CAACY,GAAN,CAAUN,QAAV,CAArB;AAEAG,MAAAA,SAAS,CAACE,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT,CAHsB,CAItB;;AACA,aAAOH,OAAP;AAEH;;AACDD,IAAAA,SAAS;AAEZ,GAZQ,EAYP,CAACJ,QAAD,CAZO,CAAT,CAFsC,CAetC;;AACA,QAAMS,IAAI,GAAC;AAACC,IAAAA,MAAM,EAAC,KAAR;AACPC,IAAAA,KAAK,EAAC,MADC;AAEHC,IAAAA,UAAU,EAAE;AAChB;AACAC,MAAAA,QAAQ,EAAE;AAFM;AAFT,GAAX;AAQA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKd;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKG,MAAM,CAACY,GAAP,CAAWC,KAAK,iBACb;AAEA,QAAA,SAAS,EAAG,eAAcd,UAAU,IAAI,kBAAmB,EAF3D;AAGA,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAEc,KAAK,CAACC,WAAR,GAAqBD,KAAK,CAACE,aAAc,EAHtE;AAGyE,QAAA,GAAG,EAAEF,KAAK,CAACG;AAHpF,SACKH,KAAK,CAACI,EADX;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ,eAYI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEC,UAAlB;AAA8B,MAAA,IAAI,EAAEX;AAApC;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH;;GAxCQX,G;;KAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import React ,{useState,useEffect}from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport \"./Row.css\";\r\nimport youtube from \"react-youtube\"\r\nconst base_url= \"http://image.tmdb.org/t/p/w154\"\r\n\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    const [movies,setMovies]=useState([]);\r\n    useEffect(()=>{\r\n        // whne this row loads this piece of code run\r\n        async function fetchData(){\r\n            const request =await axios.get(fetchUrl);\r\n            \r\n            setMovies(request.data.results);\r\n            // above line put movie in srt movie and .data.results come from console\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n\r\n    },[fetchUrl]);\r\n    // fetch url is outside so every times its change it will re render it.\r\n    const opts={height:\"390\",\r\n        width:\"100%\",\r\n            playerVars: {\r\n        // https://developers.google.com/youtube/player_parameters\r\n        autoplay: 1,},\r\n}\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie=> (\r\n                    <img \r\n                    key={movie.id}\r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    src={`${base_url}${isLargeRow ?movie.poster_path :movie.backdrop_path}`} alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n            <YouTube videoId={trailerUrl} opts={opts}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}