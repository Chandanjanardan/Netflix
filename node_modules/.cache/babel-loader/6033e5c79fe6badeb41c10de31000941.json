{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kittu\\\\react\\\\movie\\\\src\\\\Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from './axios';\nimport \"./Row.css\";\nimport movieTrailer from \"movie-trailer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"http://image.tmdb.org/t/p/w154\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"https://www.youtube.com/watch?v=VpmocE57-5I\");\n  useEffect(() => {\n    // whne this row loads this piece of code run\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results); // above line put movie in srt movie and .data.results come from console\n\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]); // fetch url is outside so every times its change it will re render it.\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        // https://www.youtube.com/watch?v=VpmocE57-5I this code extract last part\n        const urlParams = new URL(\"https://www.youtube.com/watch?v=VpmocE57-5I\");\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Row, \"9+WAo+tHN5EuatuTwMjHWuuHWDs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/kittu/react/movie/src/Row.js"],"names":["React","useState","useEffect","YouTube","axios","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URL","catch","error","console","log","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,QAAuC,OAAvC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,WAAP;AACA,OAAOC,YAAP,MAA0B,eAA1B;;AAKA,MAAMC,QAAQ,GAAE,gCAAhB;;AAGA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAOC,EAAAA,QAAP;AAAgBC,EAAAA;AAAhB,CAAb,EAA0C;AAAA;;AACtC,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBX,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAK,CAACY,UAAD,EAAYC,aAAZ,IAA2Bb,QAAQ,CAAC,6CAAD,CAAxC;AACAC,EAAAA,SAAS,CAAC,MAAI;AACV;AACA,mBAAea,SAAf,GAA0B;AACtB,YAAMC,OAAO,GAAE,MAAMZ,KAAK,CAACa,GAAN,CAAUR,QAAV,CAArB;AAEAG,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT,CAHsB,CAItB;;AACA,aAAOH,OAAP;AAEH;;AACDD,IAAAA,SAAS;AAEZ,GAZQ,EAYP,CAACN,QAAD,CAZO,CAAT,CAHsC,CAgBtC;;AACA,QAAMW,IAAI,GAAC;AAACC,IAAAA,MAAM,EAAC,KAAR;AACPC,IAAAA,KAAK,EAAC,MADC;AAEHC,IAAAA,UAAU,EAAE;AAChB;AACAC,MAAAA,QAAQ,EAAE;AAFM;AAFT,GAAX;;AAMJ,QAAMC,WAAW,GAAEC,KAAD,IAAS;AACvB,QAAGb,UAAH,EAAc;AACVC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEK;AACDT,MAAAA,YAAY,CAAC,CAAAqB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACOC,GAAD,IAAO;AACT;AACA,cAAMC,SAAS,GAAE,IAAIC,GAAJ,CAAQ,6CAAR,CAAjB;AACAjB,QAAAA,aAAa,CAACgB,SAAS,CAACb,GAAV,CAAc,GAAd,CAAD,CAAb;AAEH,OAND,EAMGe,KANH,CAMUC,KAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CANlB;AAOH;AACJ,GAZD;;AAeI,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAKzB;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACKG,MAAM,CAACyB,GAAP,CAAWV,KAAK,iBACb;AAEA,QAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CAFxB;AAGA,QAAA,SAAS,EAAG,eAAchB,UAAU,IAAI,kBAAmB,EAH3D;AAIA,QAAA,GAAG,EAAG,GAAEJ,QAAS,GAAEI,UAAU,GAAEgB,KAAK,CAACW,WAAR,GAAqBX,KAAK,CAACY,aAAc,EAJtE;AAIyE,QAAA,GAAG,EAAEZ,KAAK,CAACC;AAJpF,SACKD,KAAK,CAACa,EADX;AAAA;AAAA;AAAA;AAAA,cADH;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ,EAaI1B,UAAU,iBAAG,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YAbjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH;;GAvDQb,G;;KAAAA,G;AAyDT,eAAeA,GAAf","sourcesContent":["import React ,{useState,useEffect}from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport movieTrailer from  \"movie-trailer\";\r\n\r\n\r\n\r\n\r\nconst base_url= \"http://image.tmdb.org/t/p/w154\"\r\n\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n    const [movies,setMovies]=useState([]);\r\n    const[trailerUrl,setTrailerUrl]=useState(\"https://www.youtube.com/watch?v=VpmocE57-5I\");\r\n    useEffect(()=>{\r\n        // whne this row loads this piece of code run\r\n        async function fetchData(){\r\n            const request =await axios.get(fetchUrl);\r\n            \r\n            setMovies(request.data.results);\r\n            // above line put movie in srt movie and .data.results come from console\r\n            return request;\r\n\r\n        }\r\n        fetchData();\r\n\r\n    },[fetchUrl]);\r\n    // fetch url is outside so every times its change it will re render it.\r\n    const opts={height:\"390\",\r\n        width:\"100%\",\r\n            playerVars: {\r\n        // https://developers.google.com/youtube/player_parameters\r\n        autoplay: 1,},\r\n}\r\nconst handleClick=(movie)=>{\r\n    if(trailerUrl){\r\n        setTrailerUrl(\"\");\r\n    }else{\r\n        movieTrailer(movie?.name || \"\")\r\n        .then((url)=>{\r\n            // https://www.youtube.com/watch?v=VpmocE57-5I this code extract last part\r\n            const urlParams= new URL(\"https://www.youtube.com/watch?v=VpmocE57-5I\");\r\n            setTrailerUrl(urlParams.get('v'))\r\n\r\n        }).catch((error)=>console.log(error));\r\n    }\r\n}\r\n\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n\r\n\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie=> (\r\n                    <img \r\n                    key={movie.id}\r\n                    onClick={()=>handleClick(movie)}\r\n                    className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                    src={`${base_url}${isLargeRow ?movie.poster_path :movie.backdrop_path}`} alt={movie.name}/>\r\n                ))}\r\n            </div>\r\n           {trailerUrl &&<YouTube videoId={trailerUrl} opts={opts}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n"]},"metadata":{},"sourceType":"module"}